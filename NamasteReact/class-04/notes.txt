- inline css when we give its JS object means it will be inside {}. and in inline we use {{}} like this bcoz
outer {} are bcox we writing js code so we have to use it and inner {} bcoz we its an object and for object
we use {} like we use [] for array.

- first bracket telling that there is some oiece of js code inside it and second bracket is js object. 

props- properties that we can pass to the component.
- as functional component is like a js function end of the day same like props are normal arguments to a
function. 

-when we say we passing a prop to a component it is exactly like saying passing argument to a function.  
- react will take all the properties and wrap it inside an object and will pass it as props.

- Props use by 3 ways:

1. Directly without Destructuring

const RestaurantCard = (props) => {
        return (
        <div className="res-card" style={{ backgroundColor: "#f0f0f0" }}>
            <img className="res-logo" alt="res-logo" src="https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_264,h_288,c_fill/e0vvulfbahjxjz6k4uwi" />
            <h3>{props.resName}</h3>
            <h4>{props.cuisine}</h4>
        </div>
    )
}

2. Destructured in code

const RestaurantCard = (props) => {
 const {resName, cuisine} = props;
        return (
        <div className="res-card" style={{ backgroundColor: "#f0f0f0" }}>
            <img className="res-logo" alt="res-logo" src="https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_264,h_288,c_fill/e0vvulfbahjxjz6k4uwi" />
            <h3>{resName}</h3>
            <h4>{cuisine}</h4>
        </div>
    )
}

3. Destructured in parameter already

const RestaurantCard = ({resName, cuisine}) => {
        return (
        <div className="res-card" style={{ backgroundColor: "#f0f0f0" }}>
            <img className="res-logo" alt="res-logo" src="https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_264,h_288,c_fill/e0vvulfbahjxjz6k4uwi" />
            <h3>{resName}</h3>
            <h4>{cuisine}</h4>
        </div>
    )
}

- Config driven UI - Website driven by data/config is Config Driven UI like swiggy shows some offer at 
Delhi location but some different offers at pune location and may be no offer for mumbai location so that 
all happens due to data/config. As website is same but details changing as per data/configs. Website is 
driven by data this is known as Config Driven UI. 

Configdriven UI - Controlling our UI driven/using by a config/data coming from backend.

in props left side one is the key that will go to different components and right side one is property.
for ex : resName = Meghna Foods so resName is here the key and proeprty is Meghna Foods so now when we take
it as prop in other component then we will use resName.

same like we passed an entire object resData = {resObj} so here resData is key and resObj is property and 
now in component we will use resData.

indrectly left one pointing to right side valu only i.e. property but right side value can be different for 
multiple component so thats why we use left side key for all as it take differnet value depending on right 
side.

ex : <RestaurantCard resName="Meghna Foods" /> 
     <RestaurantCard resName="KFC" />

while looping over an array or using .map always give a key and key can be an unique id.

why we should use key while looping bcoz suppose in a Restaurant container we have 4 RestaurantCard that 
need to have unique id's as they should be uniquely represnted bcoz if a new RestaurantCard comes then DOM 
have to add that RestaurantCard and without any unique id react will render all the RestaurantCards bcoz 
react does not know that which RestaurantCard is new, as react cannnot uniquely identify these 
RestaurantCards. But if each of them have unique id let say id: 1, id: 2, id: 3, id: 4, and new card have 
id: xyz then react will only render the new card with id: xyz bcoz react exactly knows id: 1, id: 2, 
id: 3, id: 4 were already there. so it will just render one RestaurantCard here, thats the new 
RestaurantCard as it will not render all the RestaurantCards.

best example like infinite scroll.  

React itself says that never use index as the keys in map.
if we dont have unique id then we asked backend to add it and in case still don't have then only can use 
index as keys (last option).

not using keys (not acceptable) <<<< index as key <<<<<<<<<<< unique id (best practice)